tax_table <- read.table("C:/Users/marce/Desktop/taxonomy.tsv", sep = "  ", header = TRUE)
tax_table <- read.table("C:/Users/marce/Desktop/taxonomy.tsv", sep = "\t", header = TRUE)
microbial_database <- blast(db = "./16SMicrobialDB/16SMicrobial")
library("dplyr", lib.loc="C:/Program Files/R/R-3.4.4/library")
library("Biostrings")
library("rBLAST")
microbial_database <- blast(db = "./16SMicrobialDB/16SMicrobial")
microbial_database
data_fasta <- readDNAStringSet("C:/Users/marce/Desktop/dna-sequences.fasta")
data_fasta
data_fasta[1]
for (i in range(length(data_fasta))) {     print(i) }
for (i in range(1:length(data_fasta))) {     print(i) }
for (i in range(1,1:length(data_fasta))) {     print(i) }
for (i in range(1,length(data_fasta))) {     print(i) }
for (i in 1 : length(data_fasta)) {     print(i) }
for (i in 1 : length(data_fasta)) {     print(i)     data_fasta[i,]     #blast_result <- predict(microbial_database, data_fasta[i,]) }
for (i in 1 : length(data_fasta)) {     print(i)     print(data_fasta[i,])     #blast_result <- predict(microbial_database, data_fasta[i,]) }
genbank2uid(id = 'NR_041263.1')
getkey(service = "entrez")
library("taxize", lib.loc="C:/Program Files/R/R-3.4.4/library")
library("dplyr", lib.loc = "C:/Program Files/R/R-3.4.4/library")
library("taxize", lib.loc = "C:/Program Files/R/R-3.4.4/library")
getkey(service = "entrez")
Sys.setenv(ENTREZ_KEY = "ed4870836e8f61529227d9176a7c4a994c07")
getkey(service = "entrez")
blast_and_replace <- function(seq) {     blast_result <- predict(microbial_database, seq)     print(blast_result) }
blast_and_replace(data_fasta[1,])
blast_and_replace <- function(seq) {     blast_result <- arrange(predict(microbial_database, seq), "Perc.Ident")     print(blast_result) }
blast_and_replace(data_fasta[1,])
library("dplyr", lib.loc = "C:/Program Files/R/R-3.4.4/library")
blast_and_replace <- function(seq) {     blast_result <- predict(microbial_database, seq)     blast_result <- arrange(blast_result, "Perc.Ident")     print(blast_result) }
blast_and_replace(data_fasta[1,])
blast_result <- predict(microbial_database, data_fasta[1,])
blast_result <- arrange(blast_result, "Perc.Ident")
blast_result <- arrange(blast_result, Perc.Ident)
print(blast_result)
blast_result <- predict(microbial_database, data_fasta[1,])
blast_result <- arrange(blast_result, desc(Perc.Ident))
print(head(blast_result))
blast_result <- predict(microbial_database, data_fasta[1,])
blast_result <- arrange(blast_result, desc(Perc.Ident), desc(Bits), E)
print(head(blast_result))
blast_and_replace <- function(seq) {     blast_result <- arrange(predict(microbial_database, data_fasta[i,]), desc(Perc.Ident), desc(Bits), E)     print(head(blast_result)) }
blast_and_replace(data_fasta[1,])
blast_and_replace <- function(seq) {     blast_result <- arrange(predict(microbial_database, seq), desc(Perc.Ident), desc(Bits), E)     print(head(blast_result)) }
blast_and_replace(data_fasta[1,])
blast_and_replace <- function(seq) {     blast_result <- arrange(predict(microbial_database, seq), desc(Perc.Ident), desc(Bits), E)     print(blast_result[1]) }
blast_and_replace(data_fasta[1,])
blast_and_replace(data_fasta[,1])
blast_and_replace <- function(seq) {     blast_result <- arrange(predict(microbial_database, seq), desc(Perc.Ident), desc(Bits), E)     print(blast_result[,1]) }
blast_and_replace(data_fasta[1,])
blast_result[1,1]
head(blast_result[1,])
blast_result[1,]
blast_result[1,]["SubjectID"]
blast_and_replace <- function(seq) {     blast_result <- arrange(predict(microbial_database, seq), desc(Perc.Ident), desc(Bits), E)[1,]["SubjectID"]     print(blast_result) }
blast_and_replace(data_fasta[1,])
blast_and_replace <- function(seq) {     blast_result <- arrange(predict(microbial_database, seq), desc(Perc.Ident), desc(Bits), E)[1,]["SubjectID"]     print(blast_result)     genbank2uid(id = blast_result) }
blast_and_replace(data_fasta[1,])
genbank2uid(id = 'NR_113969.1')
genbank2uid(id = 'NR_113969.1')
blast_and_replace <- function(seq) {     blast_result <- arrange(predict(microbial_database, seq), desc(Perc.Ident), desc(Bits), E)[1,]["SubjectID"]     print(blast_result)     #genbank2uid(id = blast_result) }
blast_and_replace(data_fasta[1,])
blast_result[1,]["SubjectID"]
blast_result[1,]["SubjectID"][0]
blast_result[1,]["SubjectID"][1]
blast_result[1,]["SubjectID"][1,1]
genbank2uid(id = blast_result[1,]["SubjectID"])
blast_result[1,]["SubjectID"]
blast_result[1,]["SubjectID"]
blast_result[1,]["SubjectID"][1,1]
as.character(blast_result[1,]["SubjectID"])
blast_result[1,]["SubjectID"]
as.character(blast_result[1,]["SubjectID"])
as.character(blast_result[1,]["SubjectID"][1,1])
genbank2uid(id = blast_result[1,]["SubjectID"][1,1])
blast_and_replace <- function(seq) {     blast_result <- arrange(predict(microbial_database, seq), desc(Perc.Ident), desc(Bits), E)[1,]["SubjectID"]     print(blast_result)     genbank2uid(id = blast_result[1, 1]) }
blast_and_replace(data_fasta[1,])
tax_id <- genbank2uid(id = blast_result[1,]["SubjectID"][1,1])
tax_id
tax_id[1]
tax_id[[1]][1]
classification(tax_id[[1]][1], db = "ncbi")
blast_and_replace <- function(seq) {     blast_result <- arrange(predict(microbial_database, seq), desc(Perc.Ident), desc(Bits), E)[1,]["SubjectID"]     tax_classification <- classification(genbank2uid(id = blast_result[1, 1]), db = "ncbi")     print(tax_classification) }
blast_and_replace(data_fasta[1,])
classification(tax_id[[1]][1], db = "ncbi")
tax_classification <- classification(tax_id[[1]][1], db = "ncbi")
tax_classification
tax_classification[[1]][2]
tax_classification[[1]][2][1]
tax_classification[[1]][2,1]
tax_classification[[1]][2,]
tax_classification[[1]][2,1]
tax_classification
tax_classification[[1]][4, 1]
tax_classification[[1]][5, 1]
tax_classification[[1]][6, 1]
tax_classification[[1]][7, 1]
tax_classification[[1]][8, 1]
tax_classification[[1]][9, 1]
final_string <- sprintf("k__%s; p__%s; c__%s; o__%s; f__%s; g__%s; s__%s", tax_classification[[1]][2, 1], tax_classification[[1]][4, 1],                         tax_classification[[1]][5, 1], tax_classification[[1]][6, 1], tax_classification[[1]][7, 1], tax_classification[[1]][8, 1],                         tax_classification[[1]][9, 1])
final_string
tax_classification[[1]][9, 1]
split(tax_classification[[1]][9, 1])
split(tax_classification[[1]][9, 1], " ")
strsplit(tax_classification[[1]][9, 1], " ")
strsplit(c(tax_classification[[1]][9, 1], "/s"))
strsplit(tax_classification[[1]][9, 1], "/s")
strsplit(tax_classification[[1]][9, 1], "\s")
typeof(tax_classification[[1]][9, 1])
final_string
blast_and_replace <- function(seq) {     blast_result <- arrange(predict(microbial_database, seq), desc(Perc.Ident), desc(Bits), E)[1,]["SubjectID"]     tax_classification <- classification(genbank2uid(id = blast_result[1, 1]), db = "ncbi")     print(parse_ncbi_to_gg(tax_classification)) }
blast_and_replace(data_fasta[1,])
parse_ncbi_to_gg <- function(ncbi_tax) {     return(sprintf("k__%s; p__%s; c__%s; o__%s; f__%s; g__%s; s__%s", ncbi_tax[[1]][2, 1], ncbi_tax[[1]][4, 1],                         ncbi_tax[[1]][5, 1], ncbi_tax[[1]][6, 1], ncbi_tax[[1]][7, 1], ncbi_tax[[1]][8, 1],                         ncbi_tax[[1]][9, 1])) }
blast_and_replace <- function(seq) {     blast_result <- arrange(predict(microbial_database, seq), desc(Perc.Ident), desc(Bits), E)[1,]["SubjectID"]     tax_classification <- classification(genbank2uid(id = blast_result[1, 1]), db = "ncbi")     print(parse_ncbi_to_gg(tax_classification)) }
blast_and_replace(data_fasta[1,])
strsplit(tax_classification[[1]][9, 1], " ")
strsplit(tax_classification[[1]][9, 1], " ")[2]
strsplit(tax_classification[[1]][9, 1], " ")[1]
strsplit(tax_classification[[1]][9, 1], " ")[1,2]
strsplit(tax_classification[[1]][9, 1], " ")[[1]]
strsplit(tax_classification[[1]][9, 1], " ")[[1]][1]
strsplit(tax_classification[[1]][9, 1], " ")[[1]][2]
final_string <- sprintf("k__%s; p__%s; c__%s; o__%s; f__%s; g__%s; s__%s", tax_classification[[1]][2, 1], tax_classification[[1]][4, 1],                         tax_classification[[1]][5, 1], tax_classification[[1]][6, 1], tax_classification[[1]][7, 1], tax_classification[[1]][8, 1],                         tax_classification[[1]][9, 1], " ")[[1]][2])
final_string
final_string <- sprintf("k__%s; p__%s; c__%s; o__%s; f__%s; g__%s; s__%s", tax_classification[[1]][2, 1], tax_classification[[1]][4, 1],                         tax_classification[[1]][5, 1], tax_classification[[1]][6, 1], tax_classification[[1]][7, 1], tax_classification[[1]][8, 1],                         strsplit(tax_classification[[1]][9, 1], " ")[[1]][2])
final_string
parse_ncbi_to_gg <- function(ncbi_tax) {     return(sprintf("k__%s; p__%s; c__%s; o__%s; f__%s; g__%s; s__%s", ncbi_tax[[1]][2, 1], ncbi_tax[[1]][4, 1],                         ncbi_tax[[1]][5, 1], ncbi_tax[[1]][6, 1], ncbi_tax[[1]][7, 1], ncbi_tax[[1]][8, 1],                         strsplit(tax_classification[[1]][9, 1], " ")[[1]][2])) }
blast_and_replace <- function(seq) {     blast_result <- arrange(predict(microbial_database, seq), desc(Perc.Ident), desc(Bits), E)[1,]["SubjectID"]     tax_classification <- classification(genbank2uid(id = blast_result[1, 1]), db = "ncbi")     print(parse_ncbi_to_gg(tax_classification)) }
blast_and_replace(data_fasta[1,])
parse_ncbi_to_gg <- function(ncbi_tax) {     return(sprintf("k__%s; p__%s; c__%s; o__%s; f__%s; g__%s; s__%s",            # Kingdom            ncbi_tax[[1]][2, 1],            # Phylum            ncbi_tax[[1]][4, 1],            # Class            ncbi_tax[[1]][5, 1],            # Order            ncbi_tax[[1]][6, 1],            # Family            ncbi_tax[[1]][7, 1],            # Genera            ncbi_tax[[1]][8, 1],            # Species            strsplit(tax_classification[[1]][9, 1], " ")[[1]][2])) }
blast_and_replace <- function(seq) {     blast_result <- arrange(predict(microbial_database, seq), desc(Perc.Ident), desc(Bits), E)[1,]["SubjectID"]     tax_classification <- classification(genbank2uid(id = blast_result[1, 1]), db = "ncbi")     parse_ncbi_to_gg(tax_classification) }
blast_and_replace(data_fasta[1,])
tax_classification
data_small <- head(data_fasta)
data_small
blast_and_replace <- function(seq) {     blast_result <- arrange(predict(microbial_database, seq), desc(Perc.Ident), desc(Bits), E)[1,]["SubjectID"]     tax_classification <- classification(genbank2uid(id = blast_result[1, 1]), db = "ncbi")     print(parse_ncbi_to_gg(tax_classification)) }
data_small <- head(data_fasta, 3)
data_small
blast_and_replace <- function(seq) {     blast_result <- arrange(predict(microbial_database, seq), desc(Perc.Ident), desc(Bits), E)[1,]["SubjectID"]     tax_classification <- classification(genbank2uid(id = blast_result[1, 1]), db = "ncbi")     print(parse_ncbi_to_gg(tax_classification)) }
for (i in 1:length(data_small)) {     blast_and_replace(data_small[i,]) }
}
parse_ncbi_to_gg <- function(ncbi_tax) {     return(sprintf("k__%s; p__%s; c__%s; o__%s; f__%s; g__%s; s__%s",            # Kingdom            ncbi_tax[[1]][2, 1],            # Phylum            ncbi_tax[[1]][4, 1],            # Class            ncbi_tax[[1]][5, 1],            # Order            ncbi_tax[[1]][6, 1],            # Family            ncbi_tax[[1]][7, 1],            # Genera            ncbi_tax[[1]][8, 1],            # Species            strsplit(ncbi_tax[[1]][9, 1], " ")[[1]][2])) }
for (i in 1:length(data_small)) {     blast_and_replace(data_small[i,]) }
blast_and_replace <- function(seq) {     blast_result <- arrange(predict(microbial_database, seq), desc(Perc.Ident), desc(Bits), E)[1,]["SubjectID"]     tax_classification <- classification(genbank2uid(id = blast_result[1, 1]), db = "ncbi")     print(tax_classification)     print(parse_ncbi_to_gg(tax_classification)) }
for (i in 1:length(data_small)) {     blast_and_replace(data_small[i,]) }
tax_classification[[1]][2, 1]
tax_classification[[1]]
filter(tax_classification[[1]], rank == "superkingdom")
filter(tax_classification[[1]], rank == "superkingdom")[1,1]
filter(tax_classification[[1]], rank == "phylum")[1, 1]
final_string <- sprintf("k__%s; p__%s; c__%s; o__%s; f__%s; g__%s; s__%s", filter(tax_classification[[1]], rank == "superkingdom")[1, 1], tax_classification[[1]][4, 1],                         tax_classification[[1]][5, 1], tax_classification[[1]][6, 1], tax_classification[[1]][7, 1], tax_classification[[1]][8, 1],                         strsplit(tax_classification[[1]][9, 1], " ")[[1]][2])
final_string
parse_ncbi_to_gg <- function(ncbi_tax) {     return(sprintf("k__%s; p__%s; c__%s; o__%s; f__%s; g__%s; s__%s",            # Kingdom            filter(ncbi_tax[[1]], rank == "superkingdom")[1, 1],            # Phylum            filter(ncbi_tax[[1]], rank == "phylum")[1, 1],            # Class            filter(ncbi_tax[[1]], rank == "class")[1, 1],            # Order            filter(ncbi_tax[[1]], rank == "order")[1, 1],            # Family            filter(ncbi_tax[[1]], rank == "family")[1, 1],            # Genus            filter(ncbi_tax[[1]], rank == "genus")[1, 1],            # Species            strsplit(filter(ncbi_tax[[1]], rank == "species")[1, 1], " ")[[1]][2])) }
final_string <- parse_ncbi_to_gg(tax_classification)
final_string
for (i in 1:length(data_small)) {     blast_and_replace(data_small[i,]) }
blast_and_replace <- function(seq) {     blast_result <- arrange(predict(microbial_database, seq), desc(Perc.Ident), desc(Bits), E)[1,]["SubjectID"]     tax_classification <- classification(genbank2uid(id = blast_result[1, 1]), db = "ncbi")     print(parse_ncbi_to_gg(tax_classification)) }
for (i in 1:length(data_small)) {     blast_and_replace(data_small[i,]) }
final_string
head (tax_table)
tax2 <- head (tax_table)
tax2
filter(tax2, Feature.ID == "4fdb872697ff4712d1408c2a31c881ef")
filter(tax2, Feature.ID == "4fdb872697ff4712d1408c2a31c881ef") %>%     select(Taxon)
filter(tax2, Feature.ID == "4fdb872697ff4712d1408c2a31c881ef") %>%     select(Taxon) <- "Caca"
filter(tax2, Feature.ID == "4fdb872697ff4712d1408c2a31c881ef") %>%     select(Taxon) = "caca"
filter(tax2, Feature.ID == "4fdb872697ff4712d1408c2a31c881ef") %>%     select(Taxon) %>%     mutate("caca")
tax2
tax3 <- filter(tax2, Feature.ID == "4fdb872697ff4712d1408c2a31c881ef") %>%             select(Taxon) %>%             mutate("caca")
tax3
tax2["Feature.ID"]
tax2["Feature.ID"][1]
tax2["Feature.ID"][1,]
tax2["Feature.ID"][1,1]
tax2["Feature.ID"][,1]
tax2["Feature.ID"][,2]
tax2["Feature.ID"][1,2]
tax2["Feature.ID"]
tax2["Feature.ID" == "4fdb872697ff4712d1408c2a31c881ef"]
tax2 %>%     mutate(tax2 = replace(Taxon, Feature.ID == "4fdb872697ff4712d1408c2a31c881ef", "caca")) %>%     as.data.frame()
tax2
tax2 %>%     mutate(Taxon = replace(Taxon, Feature.ID == "4fdb872697ff4712d1408c2a31c881ef", "caca")) %>%     as.data.frame()
tax2
tax2 %>%     mutate(Taxon=replace(Taxon, Feature.ID=="4fdb872697ff4712d1408c2a31c881ef", "caca")) %>%     as.data.frame()
tax2
tax2 %>%     mutate(Taxon=replace(Taxon, Feature.ID=="4fdb872697ff4712d1408c2a31c881ef", NA)) %>%     as.data.frame()
tax2 %>%     mutate(Taxon=replace(Taxon, Feature.ID=="4fdb872697ff4712d1408c2a31c881ef", 0)) %>%     as.data.frame()
tax2
tax2 %>%     mutate(Taxon=replace(Taxon, Feature.ID=="4fdb872697ff4712d1408c2a31c881ef", 0)) %>%     as.data.frame()
tax2 %>% mutate(Taxon = replace(Taxon, which(Feature.ID == "4fdb872697ff4712d1408c2a31c881ef"), 0))
tax2 %>% mutate(Taxon = replace(Taxon, which(Feature.ID == "4fdb872697ff4712d1408c2a31c881ef"), "caca"))
data_small <- data.frame(head(data_fasta, 3), stringsAsFactors = FALSE)
data_small
data_small <- head(data_fasta, 3)
data_small
tax2$Taxon <- as.character(tax2$Taxon)
tax2
tax2 %>% mutate(Taxon = replace(Taxon, which(Feature.ID == "4fdb872697ff4712d1408c2a31c881ef"), "caca"))
tax2 %>% mutate(Taxon = replace(Taxon, which(Feature.ID == "4fdb872697ff4712d1408c2a31c881ef"), final_string))
data_small[1,]
data_small[1,]["names"]
data_small[1,"names"]
data_small[1,3]
data_small[1,]
data_small[1,][,3]
data_small[1,"names"]
typeof(data_small[1,])
as.character(data_small[1,])
as.character(data_small[1,])[1]
as.character(data_small[1,])[2]
data_small[1,]
data_small[1,][1]
data_small[1,][[1]]
data_small[1,][[3]]
data_small[1,][[2]]
data_small[1,][[1]]
data_small[[1]]
data_small[[2]]
data_small[[3]]
data_small
data_small.names
data_small[[names]]
data_small[["names"]]
data_small[["NAMES"]]
data_small@ranges
data_small@ranges[,3]
data_small@ranges@NAMES
data_small@ranges@NAMES[1]
data_small[,1]
data_small[1,]
data_small[1,]@ranges@NAMES[1]
filter(tax_table, Feature.ID == "4fdb872697ff4712d1408c2a31c881ef")
filter(tax_table, Feature.ID == "4fdb872697ff4712d1408c2a31c881ef") >%> select(Taxon)
filter(tax_table, Feature.ID == "4fdb872697ff4712d1408c2a31c881ef") > %>     select(Taxon)
filter(tax_table, Feature.ID == "4fdb872697ff4712d1408c2a31c881ef") >%>     select(Taxon)
filter(tax_table, Feature.ID == "4fdb872697ff4712d1408c2a31c881ef") >%>     select(Taxon)
filter(tax_table, Feature.ID == "4fdb872697ff4712d1408c2a31c881ef")
tax_table >%> filter(tax_table, Feature.ID == "4fdb872697ff4712d1408c2a31c881ef") >%>     select(Taxon)
tax_table %>% filter(tax_table, Feature.ID == "4fdb872697ff4712d1408c2a31c881ef") %>%     select(Taxon)
tax_table %>% filter(Feature.ID == "4fdb872697ff4712d1408c2a31c881ef") %>%     select(Taxon)
as.character(tax_table %>% filter(Feature.ID == "4fdb872697ff4712d1408c2a31c881ef") %>% select(Taxon))
tax_table %>% filter(Feature.ID == "4fdb872697ff4712d1408c2a31c881ef") %>% select(Taxon)
tax_table %>% select(Taxon) %>% filter(Feature.ID == "4fdb872697ff4712d1408c2a31c881ef")
tax_table %>% filter(Feature.ID == "4fdb872697ff4712d1408c2a31c881ef") %>% select(Taxon)
tax_table %>% filter(Feature.ID == "4fdb872697ff4712d1408c2a31c881ef") %>% select(Taxon)[1]
tax_table %>% filter(Feature.ID == "4fdb872697ff4712d1408c2a31c881ef") %>% select(Taxon)
taxon <- tax_table %>% filter(Feature.ID == "4fdb872697ff4712d1408c2a31c881ef") %>% select(Taxon)
taxon
taxon[1,]
taxon <- as.character(tax_table %>% filter(Feature.ID == "4fdb872697ff4712d1408c2a31c881ef") %>% select(Taxon))
taxon
taxon <- tax_table %>% filter(Feature.ID == "4fdb872697ff4712d1408c2a31c881ef") %>% select(Taxon)
taxon
taxon[,1]
taxon[1,1]
as.character(taxon[1,1])
taxon <- as.character(tax_table %>% filter(Feature.ID == "4fdb872697ff4712d1408c2a31c881ef") %>% select(Taxon)[1,1])
taxon <- as.character((tax_table %>% filter(Feature.ID == "4fdb872697ff4712d1408c2a31c881ef") %>% select(Taxon))[1,1])
taxon
blast_and_replace <- function(seq) {     seq_id <- seq@ranges@NAMES[1]     seq_taxonomy <- tax_table %>% filter(Feature.ID == seq_id) %>% select(Taxon)     print(seq_id)     print(seq_taxonomy)     # If original taxonomy is incomplete.     if (FALSE) {         blast_result <- arrange(predict(microbial_database, seq), desc(Perc.Ident), desc(Bits), E)[1,]["SubjectID"]         tax_classification <- classification(genbank2uid(id = blast_result[1, 1]), db = "ncbi")         print(parse_ncbi_to_gg(tax_classification))     } }
blast_and_replace(data_small[1,])
blast_and_replace <- function(seq) {     seq_id <- seq@ranges@NAMES[1]     seq_taxonomy <- as.character((tax_table %>% filter(Feature.ID == seq_id) %>% select(Taxon))[1, 1])     print(seq_id)     print(seq_taxonomy)     # If original taxonomy is incomplete.     if (FALSE) {         blast_result <- arrange(predict(microbial_database, seq), desc(Perc.Ident), desc(Bits), E)[1,]["SubjectID"]         tax_classification <- classification(genbank2uid(id = blast_result[1, 1]), db = "ncbi")         print(parse_ncbi_to_gg(tax_classification))     } }
blast_and_replace(data_small[1,])
is_taxonomy_complete <- function() {     return(FALSE) }
is_taxonomy_complete <- function(taxnomy) {     return(TRUE) }
tax2 <- head(tax_table, 3)
tax2 %>%     mutate(Taxon=replace(Taxon, Feature.ID=="4fdb872697ff4712d1408c2a31c881ef", 0)) %>%     as.data.frame()
tax2 <- head(tax_table, 3)
tax2$Taxon <- as.character(tax2$Taxon)
tax2 %>%     mutate(Taxon=replace(Taxon, Feature.ID=="4fdb872697ff4712d1408c2a31c881ef", 0)) %>%     as.data.frame()
tax2 <- head(tax_table, 3)
tax2$Taxon <- as.character(tax2$Taxon)
tax2 %>% mutate(Taxon = replace(Taxon, which(Feature.ID == "4fdb872697ff4712d1408c2a31c881ef"), "caca_caca"))
tax2 <- head(tax_table, 3)
tax2
tax2$Taxon <- as.character(tax2$Taxon)
tax2 %>% mutate(Taxon = replace(Taxon, which(Feature.ID == "4fdb872697ff4712d1408c2a31c881ef"), "caca_caca"))
tax_table <- read.table("C:/Users/marce/Desktop/taxonomy.tsv", sep = "\t", header = TRUE)
data_fasta <- readDNAStringSet("C:/Users/marce/Desktop/dna-sequences.fasta")
data_fasta
tax_table
data_small <- head(data_fasta, 3)
data_small
tax2 <- head(tax_table, 3)
tax2
new_tax2 <- tax2$Taxon <- as.character(tax2$Taxon)
new_tax2
new_tax2 <- new_tax2$Taxon <- as.character(new_tax2$Taxon)
new_tax2 <- tax2
new_tax2$Taxon <- as.character(new_tax2$Taxon)
new_tax2
is_taxonomy_complete <- function(taxonomy) {     return(TRUE) }
blast_and_replace <- function(seq) {     seq_id <- seq@ranges@NAMES[1]     seq_taxonomy <- as.character((new_tax2 %>% filter(Feature.ID == seq_id) %>% select(Taxon))[1, 1])     print(seq_id)     print(seq_taxonomy)     # If original taxonomy is incomplete.     if (is_taxonomy_complete(seq_taxonomy)) {         blast_result <- arrange(predict(microbial_database, seq), desc(Perc.Ident), desc(Bits), E)[1,]["SubjectID"]         ncbi_tax_classification <- classification(genbank2uid(id = blast_result[1, 1]), db = "ncbi")         print(parse_ncbi_to_gg(tax_classification))         new_tax2 %>% mutate(Taxon = replace(Taxon, which(Feature.ID == seq_id), parse_ncbi_to_gg(ncbi_tax_classification)))     } }
blast_and_replace(data_small[1,])
blast_and_replace <- function(seq) {     seq_id <- seq@ranges@NAMES[1]     seq_taxonomy <- as.character((new_tax2 %>% filter(Feature.ID == seq_id) %>% select(Taxon))[1, 1])     print(seq_id)     print(seq_taxonomy)     # If original taxonomy is incomplete.     if (is_taxonomy_complete(seq_taxonomy)) {         blast_result <- arrange(predict(microbial_database, seq), desc(Perc.Ident), desc(Bits), E)[1,]["SubjectID"]         print(blast_result)         ncbi_tax_classification <- classification(genbank2uid(id = blast_result[1, 1]), db = "ncbi")         print(ncbi_tax_classification)         print(parse_ncbi_to_gg(tax_classification))         new_tax2 %>% mutate(Taxon = replace(Taxon, which(Feature.ID == seq_id), parse_ncbi_to_gg(ncbi_tax_classification)))     } }
blast_and_replace(data_small[1,])
microbial_database <- blast(db = "./16SMicrobialDB/16SMicrobial")
tax_table <- read.table("C:/Users/marce/Desktop/taxonomy.tsv", sep = "\t", header = TRUE)
data_fasta <- readDNAStringSet("C:/Users/marce/Desktop/dna-sequences.fasta")
data_small <- head(data_fasta, 3)
tax2 <- head(tax_table, 3)
new_tax2 <- tax2
new_tax2$Taxon <- as.character(new_tax2$Taxon)
data_small
new_tax2
parse_ncbi_to_gg <- function(ncbi_tax) {     return(sprintf("k__%s; p__%s; c__%s; o__%s; f__%s; g__%s; s__%s",            # Kingdom            filter(ncbi_tax[[1]], rank == "superkingdom")[1, 1],            # Phylum            filter(ncbi_tax[[1]], rank == "phylum")[1, 1],            # Class            filter(ncbi_tax[[1]], rank == "class")[1, 1],            # Order            filter(ncbi_tax[[1]], rank == "order")[1, 1],            # Family            filter(ncbi_tax[[1]], rank == "family")[1, 1],            # Genus            filter(ncbi_tax[[1]], rank == "genus")[1, 1],            # Species            strsplit(filter(ncbi_tax[[1]], rank == "species")[1, 1], " ")[[1]][2])) }
is_taxonomy_complete <- function(taxonomy) {     return(TRUE) }
blast_and_replace <- function(seq) {     seq_id <- seq@ranges@NAMES[1]     seq_taxonomy <- as.character((new_tax2 %>% filter(Feature.ID == seq_id) %>% select(Taxon))[1, 1])     print(seq_id)     print(seq_taxonomy)     # If original taxonomy is incomplete.     if (is_taxonomy_complete(seq_taxonomy)) {         blast_result <- arrange(predict(microbial_database, seq), desc(Perc.Ident), desc(Bits), E)[1,]["SubjectID"]         print(blast_result)         ncbi_tax_classification <- classification(genbank2uid(id = blast_result[1, 1]), db = "ncbi")         print(ncbi_tax_classification)         print(parse_ncbi_to_gg(tax_classification))         new_tax2 %>% mutate(Taxon = replace(Taxon, which(Feature.ID == seq_id), parse_ncbi_to_gg(ncbi_tax_classification)))     } }
blast_and_replace(data_small[1,])
data_small[1,])
data_small[1,]
is_taxonomy_complete <- function(taxonomy) {     print("true")     return(TRUE) }
blast_and_replace(data_small[1,])
blast_and_replace <- function(seq) {     seq_id <- seq@ranges@NAMES[1]     seq_taxonomy <- as.character((new_tax2 %>% filter(Feature.ID == seq_id) %>% select(Taxon))[1, 1])     print(seq_id)     print(seq_taxonomy)     # If original taxonomy is incomplete.     if (is_taxonomy_complete(seq_taxonomy)) {         print("blasting")         blast_result <- arrange(predict(microbial_database, seq), desc(Perc.Ident), desc(Bits), E)[1,]["SubjectID"]         print(blast_result)         ncbi_tax_classification <- classification(genbank2uid(id = blast_result[1, 1]), db = "ncbi")         print(ncbi_tax_classification)         print(parse_ncbi_to_gg(tax_classification))         new_tax2 %>% mutate(Taxon = replace(Taxon, which(Feature.ID == seq_id), parse_ncbi_to_gg(ncbi_tax_classification)))     } }
blast_and_replace(data_small[1,])
Sys.which("blastn")
getkey(service = "entrez")
blast_result2 <- arrange(predict(microbial_database, data_small[1,]), desc(Perc.Ident), desc(Bits), E)[1,]["SubjectID"]
predict(microbial_database, data_small[1,])
data_small[1,]
predict(microbial_database, data_small[1,])
microbial_database
predict(microbial_database, data_fasta[1,])
blast_path <- Sys.which("blastn")
blast_path
if (length(blast_path) > 1) {     print("Blast found at:")     print(blast_path) }else {     "Blast not found! Install Blast" }
is_taxonomy_incomplete <- function(taxonomy, level = spcs) {     str_splt <- strsplit(taxonomy, ";")     switch(level,             spcs = {             # Species level             return(length(str_splt[[1]]) < 7 || length(strsplit(str_splt[[1]][7], "__")[[1]]) < 2)             },             gen = {             # Genus level             return(length(str_splt[[1]]) < 6 || length(strsplit(str_splt[[1]][6], "__")[[1]]) < 2)             },             fam = {             # Family             return(length(str_splt[[1]]) < 5 || length(strsplit(str_splt[[1]][5], "__")[[1]]) < 2)             }) }
current_string <- "k__Bacteria;p__Firmicutes;c__Bacilli;o__Lactobacillales;f__Lactobacillaceae;g__Lactobacillus;s__buchneri"
is_taxonomy_incomplete(current_string, spcs)
current_string <- "k__Bacteria;p__Firmicutes;c__Bacilli;o__Lactobacillales;f__Lactobacillaceae;g__Lactobacillus;s__buchneri"
is_taxonomy_incomplete(current_string, "spcs")
is_taxonomy_incomplete(current_string, "gen")
is_taxonomy_incomplete(current_string, "fam")
is_taxonomy_incomplete(current_string, "fam")
current_string2 <- "k__Bacteria;p__Firmicutes;c__Bacilli;o__Lactobacillales;f__Lactobacillaceae;g__Lactobacillus;s__"
is_taxonomy_incomplete(current_string2, "spcs")
is_taxonomy_incomplete(current_string2, "gen")
is_taxonomy_incomplete(current_string2, "fam")
current_string <- "k__Bacteria;p__Firmicutes;c__Bacilli;o__Lactobacillales;f__Lactobacillaceae;g__Lactobacillus;s__buchneri"
is_taxonomy_incomplete(current_string, "spcs")
is_taxonomy_incomplete(current_string, "gen")
is_taxonomy_incomplete(current_string, "fam")
current_string2 <- "k__Bacteria;p__Firmicutes;c__Bacilli;o__Lactobacillales;f__Lactobacillaceae;g__Lactobacillus;s__"
is_taxonomy_incomplete(current_string2, "spcs")
is_taxonomy_incomplete(current_string2, "gen")
is_taxonomy_incomplete(current_string2, "fam")
current_string3 <- "k__Bacteria;p__Firmicutes;c__Bacilli;o__Lactobacillales;f__Lactobacillaceae;g__;s__"
is_taxonomy_incomplete(current_string3, "spcs")
is_taxonomy_incomplete(current_string3, "gen")
is_taxonomy_incomplete(current_string3, "fam")
current_string4 <- "k__Bacteria;p__Firmicutes;c__Bacilli;o__Lactobacillales;f__Lactobacillaceae"
is_taxonomy_incomplete(current_string4, "spcs")
is_taxonomy_incomplete(current_string4, "gen")
is_taxonomy_incomplete(current_string4, "fam")
current_string5 <- "k__Bacteria;p__Firmicutes;c__Bacilli;o__Lactobacillales;"
is_taxonomy_incomplete(current_string5, "spcs")
is_taxonomy_incomplete(current_string5, "gen")
is_taxonomy_incomplete(current_string5, "fam")
current_string5 <- "k__Bacteria;p__Firmicutes;c__Bacilli;o__Lactobacillales;"
is_taxonomy_incomplete(current_string5, "spcs")
is_taxonomy_incomplete(current_string5, "gen")
is_taxonomy_incomplete(current_string5, "fam")
current_string5 <- "k__Bacteria;p__Firmicutes;c__Bacilli;o__Lactobacillales;f__;g__;s__"
is_taxonomy_incomplete(current_string5, "spcs")
is_taxonomy_incomplete(current_string5, "gen")
is_taxonomy_incomplete(current_string5, "fam")
current_string5 <- "k__Bacteria;p__Firmicutes;c__Bacilli;o__Lactobacillales"
is_taxonomy_incomplete(current_string5, "spcs")
is_taxonomy_incomplete(current_string5, "gen")
is_taxonomy_incomplete(current_string5, "fam")
is_taxonomy_incomplete(current_string4, "fam")
employee <- c('John Doe', 'Peter Gynn', 'Jolie Hope')
salary <- c(21000, 23400, 26800)
startdate <- as.Date(c('2010-11-1', '2008-3-25', '2007-3-14'))
employ.data <- data.frame(employee, salary, startdate, stringsAsFactors = FALSE)
employ.data
employ.data[1,]
employ.data[1,]$salary
employee <- c('John Doe', 'Peter Gynn', 'Jolie Hope', "caca")
Perc.Ident <- c(21000, 23400, 26800, 25000)
blast_result_table <- data.frame(employee, Perc.Ident, stringsAsFactors = FALSE)
blast_result_table
employ.data[1,]$Perc.Ident
blast_result_table[1,]$Perc.Ident
min_percent_found <- FALSE
for (row in nrow(blast_result_table)) {     if (blast_result_table[row, ]$Perc.Ident >= perc_ident) {         min_percent_found <- TRUE         blast_result <- blast_result_table[row,]     } }
min_percent_found <- FALSE
for (row in nrow(blast_result_table)) {     if (blast_result_table[row, ]$Perc.Ident >= 20000) {         min_percent_found <- TRUE         blast_result <- blast_result_table[row,]     } }
blast_result
min_percent_found <- FALSE
for (row in nrow(blast_result_table)) {     if (blast_result_table[row, ]$Perc.Ident >= 20000) {         min_percent_found <- TRUE         blast_result <- blast_result_table[row,]         break     } }
blast_result
blast_result_table
min_percent_found <- FALSE
for (row in nrow(blast_result_table)) {     if (blast_result_table[row, ]$Perc.Ident >= 20000) {         min_percent_found <- TRUE         blast_result <- blast_result_table[row,]         break     } }
blast_result
if (min_percent_found == FALSE) {     blast_result <- blast_result_table[1,] }
blast_result
min_percent_found <- FALSE
for (row in nrow(blast_result_table)) {     if (blast_result_table[row, ]$Perc.Ident >= 30000) {         min_percent_found <- TRUE         blast_result <- blast_result_table[row,]         break     } }
blast_result
blast_result_table
blast_result_table[1,]$Perc.Ident
blast_result <- "none"
min_percent_found <- FALSE
for (row in nrow(blast_result_table)) {     if (blast_result_table[row, ]$Perc.Ident >= 30000) {         min_percent_found <- TRUE         blast_result <- blast_result_table[row,]         break     } }
blast_result
if (min_percent_found == FALSE) {     blast_result <- blast_result_table[1,] }
blast_result
blast_result <- "none"
min_percent_found <- FALSE
for (row in nrow(blast_result_table)) {     if (blast_result_table[row, ]$Perc.Ident >= 20000) {         min_percent_found <- TRUE         blast_result <- blast_result_table[row,]         break     } }
blast_result
blast_result <- "none"
min_percent_found <- FALSE
for (row in nrow(blast_result_table)) {     if (blast_result_table[row, ]$Perc.Ident >= 20000) {         min_percent_found <- TRUE         blast_result <- blast_result_table[row,]         break     } }
blast_result
blast_result <- "none"
min_percent_found <- FALSE
for (row in nrow(blast_result_table)) {     print(row)     print(blast_result_table[row,]$Perc.Ident >= 20000)     if (blast_result_table[row, ]$Perc.Ident >= 20000) {         min_percent_found <- TRUE         blast_result <- blast_result_table[row,]         break     } }
employee <- c('John Doe', 'Peter Gynn', 'Jolie Hope', "caca")
Perc.Ident <- c(21000, 23400, 26800, 5000)
blast_result_table <- data.frame(employee, Perc.Ident, stringsAsFactors = FALSE)
blast_result_table
blast_result_table[1,]$Perc.Ident
blast_result <- "none"
min_percent_found <- FALSE
for (row in nrow(blast_result_table)) {     print(row)     print(blast_result_table[row,]$Perc.Ident >= 20000)     if (blast_result_table[row, ]$Perc.Ident >= 20000) {         min_percent_found <- TRUE         blast_result <- blast_result_table[row,]         break     } }
blast_result
blast_result <- "none"
min_percent_found <- FALSE
for (row in 1:nrow(blast_result_table)) {     print(row)     print(blast_result_table[row,]$Perc.Ident >= 20000)     if (blast_result_table[row, ]$Perc.Ident >= 20000) {         min_percent_found <- TRUE         blast_result <- blast_result_table[row,]         break     } }
blast_result
blast_result <- "none"
min_percent_found <- FALSE
for (row in 1:nrow(blast_result_table)) {     print(row)     print(blast_result_table[row,]$Perc.Ident >= 20000)     if (blast_result_table[row, ]$Perc.Ident >= 20000) {         min_percent_found <- TRUE         blast_result <- blast_result_table[row,]         break     } }
blast_result
blast_result <- "none"
min_percent_found <- FALSE
for (row in 1:nrow(blast_result_table)) {     print(row)     print(blast_result_table[row,]$Perc.Ident >= 30000)     if (blast_result_table[row, ]$Perc.Ident >= 30000) {         min_percent_found <- TRUE         blast_result <- blast_result_table[row,]         break     } }
blast_result
if (min_percent_found == FALSE) {     blast_result <- blast_result_table[1,] }
blast_result
download_database <- function(phyl_group = "bacteria", path = "./" ) {     # If database folder does not exist     if (!file.exists(paste(path, "16SMicrobialDB/16SMicrobial.nhr"))) {         # Download database.         download.file("ftp://ftp.ncbi.nlm.nih.gov/blast/db/16SMicrobial.tar.gz", paste(path, "16SMicrobial.tar.gz"), mode = 'wb')         # Extract reference database.         untar(paste(path, "16SMicrobial.tar.gz"), exdir = paste(path, "16SMicrobialDB"))         # return database         return(blast(db = paste(path, "16SMicrobialDB/16SMicrobial")))     } }
microbial_database <- download_database(phyl_group = "bacteria", path = "./data_for_tests/")
download_database <- function(phyl_group = "bacteria", path = "." ) {     # If database folder does not exist     if (!file.exists(paste(path, "/16SMicrobialDB/16SMicrobial.nhr"))) {         # Download database.         download.file("ftp://ftp.ncbi.nlm.nih.gov/blast/db/16SMicrobial.tar.gz", paste(path, "/16SMicrobial.tar.gz"), mode = 'wb')         # Extract reference database.         untar(paste(path, "/16SMicrobial.tar.gz"), exdir = paste(path, "16SMicrobialDB"))         # return database         return(blast(db = paste(path, "16SMicrobialDB/16SMicrobial")))     } }
download_database <- function(phyl_group = "bacteria", path = "." ) {     # If database folder does not exist     if (!file.exists(paste(path, "/16SMicrobial.tar.gz"))) {         # Download database.         download.file("ftp://ftp.ncbi.nlm.nih.gov/blast/db/16SMicrobial.tar.gz", paste(path, "/16SMicrobial.tar.gz"), mode = 'wb')         # Extract reference database.         untar(paste(path, "/16SMicrobial.tar.gz"), exdir = paste(path, "16SMicrobialDB"))         # return database         return(blast(db = paste(path, "16SMicrobialDB/16SMicrobial")))     } }
microbial_database <- download_database(phyl_group = "bacteria", path = "./data_for_tests")
!file.exists(paste(path, "/16SMicrobial.tar.gz"))
path = "./data_for_tests"
!file.exists(paste(path, "/16SMicrobial.tar.gz"))
file.exists(paste(path, "/16SMicrobial.tar.gz"))
file.exists(paste(path, "/ 16SMicrobial.tar.gz"))
file.exists(paste(path, "/16SMicrobial.tar.gz"), sep = "")
paste(path, "/16SMicrobial.tar.gz")
paste(path, "/16SMicrobial.tar.gz", collapse = TRUE)
paste0(path, "/16SMicrobial.tar.gz")
file.exists(paste0(path, "/16SMicrobial.tar.gz"))
path = "./data_for_tests"
paste0(path, "/16SMicrobial.tar.gz")
path = "./data_for_tests"
file.exists(paste0(path, "/16SMicrobial.tar.gz"))
download_database <- function(phyl_group = "bacteria", path = "." ) {     # If database folder does not exist     if (!file.exists(paste0(path, "/16SMicrobial.tar.gz"))) {         # Download database.         print("Dowloading database")         #download.file("ftp://ftp.ncbi.nlm.nih.gov/blast/db/16SMicrobial.tar.gz", paste(path, "/16SMicrobial.tar.gz"), mode = 'wb')         # Extract reference database.         #untar(paste(path, "/16SMicrobial.tar.gz"), exdir = paste(path, "16SMicrobialDB"))         # return database         #return(blast(db = paste(path, "16SMicrobialDB/16SMicrobial")))     } }
microbial_database <- download_database(phyl_group = "bacteria", path = "./data_for_tests")
microbial_database <- download_database(phyl_group = "bacteria", path = "./data_for_tests")
download_database <- function(phyl_group = "bacteria", path = "." ) {     # If database folder does not exist     if (!file.exists(paste0(path, "/16SMicrobialDB/16SMicrobial.nhr"))) {         # Download database.         print("Dowloading database")         download.file("ftp://ftp.ncbi.nlm.nih.gov/blast/db/16SMicrobial.tar.gz", paste0(path, "/16SMicrobial.tar.gz"), mode = 'wb')         # Extract reference database.         untar(paste0(path, "/16SMicrobial.tar.gz"), exdir = paste0(path, "16SMicrobialDB"))     }     # return database     return(blast(db = paste0(path, "16SMicrobialDB/16SMicrobial"))) }
microbial_database <- download_database(phyl_group = "bacteria", path = "./data_for_tests")
data_fasta <- readDNAStringSet("./data_for_tests/bacteria_dna_sequences.fasta")
source("./update_taxonomy_refseq.R")
data_fasta <- readDNAStringSet("./data_for_tests/bacteria_dna_sequences.fasta")
microbial_database <- get_database(phyl_group = "bacteria", path = "./data_for_tests")
source("./update_taxonomy_refseq.R")
data_fasta <- readDNAStringSet("./data_for_tests/bacteria_dna_sequences.fasta")
microbial_database <- get_database(phyl_group = "bacteria", path = "./data_for_tests")
Sys.setenv(ENTREZ_KEY = "ed4870836e8f61529227d9176a7c4a994c07")
getkey(service = "entrez")
Sys.which("blastn")
fasta1 <- data_fasta[1,]
fasta1
fasta2 <- data_fasta[10,]
fasta2
fasta3 <- data_fasta[30,]
fasta3
ref_seq_taxonomy1 <- blast_n_get_ncbi_tax(fasta1, microbial_database = microbial_database)
ref_seq_taxonomy1
ref_seq_taxonomy2 <- blast_n_get_ncbi_tax(fasta2, microbial_database = microbial_database)
ref_seq_taxonomy2
ref_seq_taxonomy3 <- blast_n_get_ncbi_tax(fasta3, microbial_database = microbial_database)
ref_seq_taxonomy3
parse_ncbi_to_gg(ref_seq_taxonomy1[4])
parse_ncbi_to_gg(ref_seq_taxonomy2[4])
parse_ncbi_to_gg(ref_seq_taxonomy3[4])
bacteria_tax_table <- read.table("./data_for_tests/bacteria_taxonomy.tsv", sep = "\t", header = TRUE)
bacteria_data_fasta <- readDNAStringSet("./data_for_tests/bacteria_dna_sequences.fasta")
microbial_database <- get_database(phyl_group = "bacteria", path = "./data_for_tests")
Sys.which("blastn")
tax_table_updated <- update_taxonomy_refseq(taxonomy_table = bacteria_tax_table, data_fasta = bacteria_data_fasta, level = "spcs", phyl_group = "bacteria", update_all = FALSE)
source("./update_taxonomy_refseq.R")
data_fasta <- readDNAStringSet("./data_for_tests/bacteria_dna_sequences.fasta")
bacteria_database <- get_database(phyl_group = "bacteria", path = "./data_for_tests")
Sys.setenv(ENTREZ_KEY = "ed4870836e8f61529227d9176a7c4a994c07")
getkey(service = "entrez")
Sys.which("blastn")
fasta1 <- data_fasta[1,]
fasta1
fasta2 <- data_fasta[10,]
fasta2
fasta3 <- data_fasta[30,]
fasta3
ref_seq_taxonomy1 <- blast_n_get_ncbi_tax(fasta1, microbial_database = bacteria_database)
ref_seq_taxonomy1
ref_seq_taxonomy2 <- blast_n_get_ncbi_tax(fasta2, microbial_database = bacteria_database)
ref_seq_taxonomy2
ref_seq_taxonomy3 <- blast_n_get_ncbi_tax(fasta3, microbial_database = bacteria_database)
ref_seq_taxonomy3
parse_ncbi_to_gg(ref_seq_taxonomy1[4])
parse_ncbi_to_gg(ref_seq_taxonomy2[4])
parse_ncbi_to_gg(ref_seq_taxonomy3[4])
ref_seq_taxonomy3
bacteria_tax_table <- read.table("./data_for_tests/bacteria_taxonomy.tsv", sep = "\t", header = TRUE)
bacteria_data_fasta <- readDNAStringSet("./data_for_tests/bacteria_dna_sequences.fasta")
bacteria_database <- get_database(phyl_group = "bacteria", path = "./data_for_tests")
head(tax_table_updated)
head(bacteria_tax_table)
tax_table_updated <- update_taxonomy_refseq(taxonomy_table = bacteria_tax_table, bacteria_database = microbial_database, data_fasta = bacteria_data_fasta, level = "spcs", phyl_group = "bacteria", update_all = FALSE)
tax_table_updated <- update_taxonomy_refseq(taxonomy_table = bacteria_tax_table, microbial_database = bacteria_database, data_fasta = bacteria_data_fasta, level = "spcs", phyl_group = "bacteria", update_all = FALSE)
head(tax_table_updated)
source("./update_taxonomy_refseq.R")
bacteria_tax_table <- read.table("./data_for_tests/bacteria_taxonomy.tsv", sep = "\t", header = TRUE)
bacteria_data_fasta <- readDNAStringSet("./data_for_tests/bacteria_dna_sequences.fasta")
bacteria_database <- get_database(phyl_group = "bacteria", path = "./data_for_tests")
